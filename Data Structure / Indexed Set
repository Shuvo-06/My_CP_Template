#include<iostream>
using namespace std ;

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,
tree_order_statistics_node_update> indexed_set;

int main(){
    //DS[key] = order
    //find -> find_by_order
    //at -> order_of_key
    indexed_set s;
    
    //insertion
    //time complexity -> O(logN)
    int n;
    cin>>n;
    for (int i=0; i<n; i++) {
        int k;
        cin>>k;
        s.insert(k);
    }
    
    //knowing the size of the set
    cout << s.size() <<endl;

    //outputting all elemets using auto loop
    for (auto x : s) cout << x <<" ";
    cout << endl;

    //outputting all elements using for loop
    for (int i=0; i<s.size(); i++) cout << *s.find_by_order(i) <<" ";
    cout << endl;

    //outputting all elements using iterator
    for (auto i=s.begin(); i!=s.end(); i++) cout << *i <<" ";
    cout << endl;

    //finding values 
    //works like find() 
    //if element is not present, it returns the index that element would take if inserted
    //time complexity -> O(logN)
    int qq;
    cin>>qq;
    while (qq--){
        int k;
        cin>>k;
        cout << s.order_of_key(k)<<"\n";
    }
    
    //accessing elements by index
    //works like at() of vector,but returns iterator
    int tt;
    cin>>tt;
    while (tt--){
        int k;
        cin>>k;
        cout<< *s.find_by_order(k) <<"\n";
    }
    
    return 0;
}